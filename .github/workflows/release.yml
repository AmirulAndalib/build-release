#=================================================
#   Description: Build X-WRT using GitHub Actions
#   Lisence: MIT
#   Author: ptpt52
#=================================================

name: Build Jobs 22.03_b202205250111

on:
  push:
    tags:
    - 'v*'

jobs:
  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-18.04
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: X-WRT ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
  build-ath79-generic_ath79-generic-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-generic ath79-generic-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ath79-generic_ath79-generic-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ath79-generic
      id: asset-c2fa6b51c5433f88aae640740f1baae4
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ath79-generic.zip
        asset_name: x-wrt-22.03_b202205250111-ath79-generic.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ath79-generic-nosymbol
      id: asset-db9096ab8be6b9c307db836ccdb3945c
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ath79-generic-nosymbol.zip
        asset_name: x-wrt-22.03_b202205250111-ath79-generic-nosymbol.zip
        asset_content_type: application/zip
  build-ath79-nand:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-nand" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ath79-nand
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ath79-nand
      id: asset-f11bbd5b46dfb02e0fe8d55c62fb4b8d
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ath79-nand.zip
        asset_name: x-wrt-22.03_b202205250111-ath79-nand.zip
        asset_content_type: application/zip
  build-ipq40xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq40xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ipq40xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ipq40xx-generic
      id: asset-d6989b44c90373526daa5a05b46c5a65
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ipq40xx-generic.zip
        asset_name: x-wrt-22.03_b202205250111-ipq40xx-generic.zip
        asset_content_type: application/zip
  build-bcm27xx-bcm2709_sunxi-cortexa7:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2709 sunxi-cortexa7" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2709_sunxi-cortexa7
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-bcm27xx-bcm2709
      id: asset-3fc3e3893f399ca8fa0210692936a946
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-bcm27xx-bcm2709.zip
        asset_name: x-wrt-22.03_b202205250111-bcm27xx-bcm2709.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-22.03_b202205250111-sunxi-cortexa7
      id: asset-3960379b1c27ec12f79f3c0cdda809db
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-sunxi-cortexa7.zip
        asset_name: x-wrt-22.03_b202205250111-sunxi-cortexa7.zip
        asset_content_type: application/zip
  build-bcm27xx-bcm2710_mvebu-cortexa53:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2710 mvebu-cortexa53" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2710_mvebu-cortexa53
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-bcm27xx-bcm2710
      id: asset-b39d74ff251f290ed5e1167fc875892f
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-bcm27xx-bcm2710.zip
        asset_name: x-wrt-22.03_b202205250111-bcm27xx-bcm2710.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-22.03_b202205250111-mvebu-cortexa53
      id: asset-36ad7eca5c2cef44bb519bf65fadf1a1
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-mvebu-cortexa53.zip
        asset_name: x-wrt-22.03_b202205250111-mvebu-cortexa53.zip
        asset_content_type: application/zip
  build-mediatek-mt7622_bcm4908-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mediatek-mt7622 bcm4908-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-mediatek-mt7622_bcm4908-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-mediatek-mt7622
      id: asset-b352ea57d3d50bb864399bf2c413918d
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-mediatek-mt7622.zip
        asset_name: x-wrt-22.03_b202205250111-mediatek-mt7622.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-22.03_b202205250111-bcm4908-generic
      id: asset-786d442635841e916586d6b5525a75af
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-bcm4908-generic.zip
        asset_name: x-wrt-22.03_b202205250111-bcm4908-generic.zip
        asset_content_type: application/zip
  build-bcm27xx-bcm2711:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2711" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2711
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-bcm27xx-bcm2711
      id: asset-10498e289f32e7e2f6abdc467a14cc2e
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-bcm27xx-bcm2711.zip
        asset_name: x-wrt-22.03_b202205250111-bcm27xx-bcm2711.zip
        asset_content_type: application/zip
  build-bcm53xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm53xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-bcm53xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-bcm53xx-generic
      id: asset-954c27f60d8c94122f9894956ba425e5
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-bcm53xx-generic.zip
        asset_name: x-wrt-22.03_b202205250111-bcm53xx-generic.zip
        asset_content_type: application/zip
  build-ipq806x-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq806x-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ipq806x-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ipq806x-generic
      id: asset-f9ad005914d9db4111465fc17436c732
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ipq806x-generic.zip
        asset_name: x-wrt-22.03_b202205250111-ipq806x-generic.zip
        asset_content_type: application/zip
  build-kirkwood-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="kirkwood-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-kirkwood-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-kirkwood-generic
      id: asset-0d3613b62490683c76a58463a9fac648
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-kirkwood-generic.zip
        asset_name: x-wrt-22.03_b202205250111-kirkwood-generic.zip
        asset_content_type: application/zip
  build-mvebu-cortexa9:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mvebu-cortexa9" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-mvebu-cortexa9
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-mvebu-cortexa9
      id: asset-c6c347af7b2093cd5c718149ad19c654
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-mvebu-cortexa9.zip
        asset_name: x-wrt-22.03_b202205250111-mvebu-cortexa9.zip
        asset_content_type: application/zip
  build-ramips-mt7620_ramips-mt7620-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7620 ramips-mt7620-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ramips-mt7620_ramips-mt7620-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ramips-mt7620
      id: asset-e83f9573f44bfa6840665689b6ef8d88
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ramips-mt7620.zip
        asset_name: x-wrt-22.03_b202205250111-ramips-mt7620.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ramips-mt7620-nosymbol
      id: asset-bb720606a8a260b759b6c260a1282481
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ramips-mt7620-nosymbol.zip
        asset_name: x-wrt-22.03_b202205250111-ramips-mt7620-nosymbol.zip
        asset_content_type: application/zip
  build-ramips-mt7621_ramips-mt7621-ext4fs:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7621 ramips-mt7621-ext4fs" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ramips-mt7621_ramips-mt7621-ext4fs
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ramips-mt7621
      id: asset-dcb64643d8c78174ac5d8478b5400c2c
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ramips-mt7621.zip
        asset_name: x-wrt-22.03_b202205250111-ramips-mt7621.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ramips-mt7621-ext4fs
      id: asset-dfe81e00dd3654f9f0572511a5f39703
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ramips-mt7621-ext4fs.zip
        asset_name: x-wrt-22.03_b202205250111-ramips-mt7621-ext4fs.zip
        asset_content_type: application/zip
  build-ramips-mt76x8_ramips-mt76x8-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt76x8 ramips-mt76x8-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ramips-mt76x8_ramips-mt76x8-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ramips-mt76x8
      id: asset-4e5ec48d40dde8dc52fc99945c97356a
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ramips-mt76x8.zip
        asset_name: x-wrt-22.03_b202205250111-ramips-mt76x8.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-22.03_b202205250111-ramips-mt76x8-nosymbol
      id: asset-599075bd0df0adb2fa91a40cf8858bcc
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-ramips-mt76x8-nosymbol.zip
        asset_name: x-wrt-22.03_b202205250111-ramips-mt76x8-nosymbol.zip
        asset_content_type: application/zip
  build-rockchip-armv8:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="rockchip-armv8" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-rockchip-armv8
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-rockchip-armv8
      id: asset-bb39e6ad54bcfdeeaffc055bc6154469
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-rockchip-armv8.zip
        asset_name: x-wrt-22.03_b202205250111-rockchip-armv8.zip
        asset_content_type: application/zip
  build-x86_64:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-x86_64
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-x86_64
      id: asset-98b5605fb59b6bdca7eff919206b6339
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-x86_64.zip
        asset_name: x-wrt-22.03_b202205250111-x86_64.zip
        asset_content_type: application/zip
  build-x86_64-docker:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64-docker" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-x86_64-docker
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-x86_64-docker
      id: asset-1eea948d9df0de4664e07c26d3ed059c
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-x86_64-docker.zip
        asset_name: x-wrt-22.03_b202205250111-x86_64-docker.zip
        asset_content_type: application/zip
  build-x86_generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-x86_generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-22.03_b202205250111-x86_generic
      id: asset-7e9e913d17d8fda91a92fea96c928898
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-22.03_b202205250111-x86_generic.zip
        asset_name: x-wrt-22.03_b202205250111-x86_generic.zip
        asset_content_type: application/zip
