#=================================================
#   Description: Build X-WRT using GitHub Actions
#   Lisence: MIT
#   Author: ptpt52
#=================================================

name: Build Jobs 9.0_b202105042338

on:
  push:
    tags:
    - 'v*'

jobs:
  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-18.04
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
  build-ath79-generic_ath79-generic-nosymbol_ath79-nand:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-generic ath79-generic-nosymbol ath79-nand" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ath79-generic_ath79-generic-nosymbol_ath79-nand
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ath79-generic
      id: asset-eb66ced49a62f5ccc3b782fe7fc26854
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ath79-generic.zip
        asset_name: x-wrt-9.0_b202105042338-ath79-generic.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ath79-generic-nosymbol
      id: asset-402fa98141b5c59132df9c4f27e2a516
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ath79-generic-nosymbol.zip
        asset_name: x-wrt-9.0_b202105042338-ath79-generic-nosymbol.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ath79-nand
      id: asset-91514b21fc576f8f5d50ca2556bb0a37
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ath79-nand.zip
        asset_name: x-wrt-9.0_b202105042338-ath79-nand.zip
        asset_content_type: application/zip
  build-ipq40xx-generic_bcm27xx-bcm2709_sunxi-cortexa7:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq40xx-generic bcm27xx-bcm2709 sunxi-cortexa7" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ipq40xx-generic_bcm27xx-bcm2709_sunxi-cortexa7
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ipq40xx-generic
      id: asset-4b8788fec953bad19f29c96a203f5bf3
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ipq40xx-generic.zip
        asset_name: x-wrt-9.0_b202105042338-ipq40xx-generic.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-bcm27xx-bcm2709
      id: asset-43114f31a44c276f8f24fac510aff4a3
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-bcm27xx-bcm2709.zip
        asset_name: x-wrt-9.0_b202105042338-bcm27xx-bcm2709.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-sunxi-cortexa7
      id: asset-e1f6bab0cab058a0eb561ac23fd0df26
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-sunxi-cortexa7.zip
        asset_name: x-wrt-9.0_b202105042338-sunxi-cortexa7.zip
        asset_content_type: application/zip
  build-bcm27xx-bcm2710_mvebu-cortexa53_mediatek-mt7622:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2710 mvebu-cortexa53 mediatek-mt7622" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2710_mvebu-cortexa53_mediatek-mt7622
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-bcm27xx-bcm2710
      id: asset-583a688d077862b9d3628987fc921709
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-bcm27xx-bcm2710.zip
        asset_name: x-wrt-9.0_b202105042338-bcm27xx-bcm2710.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-mvebu-cortexa53
      id: asset-116bdd4ecd62ff301dedf011abb136e7
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-mvebu-cortexa53.zip
        asset_name: x-wrt-9.0_b202105042338-mvebu-cortexa53.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-mediatek-mt7622
      id: asset-31be64309f46295e36fa5a59b44a5c40
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-mediatek-mt7622.zip
        asset_name: x-wrt-9.0_b202105042338-mediatek-mt7622.zip
        asset_content_type: application/zip
  build-bcm27xx-bcm2711:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2711" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2711
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-bcm27xx-bcm2711
      id: asset-b6b8fb2700133902b1c1fa7038464a0c
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-bcm27xx-bcm2711.zip
        asset_name: x-wrt-9.0_b202105042338-bcm27xx-bcm2711.zip
        asset_content_type: application/zip
  build-bcm53xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm53xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-bcm53xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-bcm53xx-generic
      id: asset-0a886bf9e1204cd0e4209aa2b552f431
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-bcm53xx-generic.zip
        asset_name: x-wrt-9.0_b202105042338-bcm53xx-generic.zip
        asset_content_type: application/zip
  build-ipq806x-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq806x-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ipq806x-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ipq806x-generic
      id: asset-369e2432e7b93711f91a912ec81f6bbc
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ipq806x-generic.zip
        asset_name: x-wrt-9.0_b202105042338-ipq806x-generic.zip
        asset_content_type: application/zip
  build-kirkwood-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="kirkwood-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-kirkwood-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-kirkwood-generic
      id: asset-6c37e8c03e089f2c9a5a0fdca924b24d
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-kirkwood-generic.zip
        asset_name: x-wrt-9.0_b202105042338-kirkwood-generic.zip
        asset_content_type: application/zip
  build-mvebu-cortexa9:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mvebu-cortexa9" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-mvebu-cortexa9
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-mvebu-cortexa9
      id: asset-328341559f852a9f0dcbda49026e2e3b
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-mvebu-cortexa9.zip
        asset_name: x-wrt-9.0_b202105042338-mvebu-cortexa9.zip
        asset_content_type: application/zip
  build-ramips-mt7620_ramips-mt7620-nosymbol_ramips-mt7621:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7620 ramips-mt7620-nosymbol ramips-mt7621" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ramips-mt7620_ramips-mt7620-nosymbol_ramips-mt7621
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ramips-mt7620
      id: asset-dcf6ebd00f15cf871c97625fa9578dc1
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ramips-mt7620.zip
        asset_name: x-wrt-9.0_b202105042338-ramips-mt7620.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ramips-mt7620-nosymbol
      id: asset-7fa5479bbb410e8245c2c50fdfdf15da
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ramips-mt7620-nosymbol.zip
        asset_name: x-wrt-9.0_b202105042338-ramips-mt7620-nosymbol.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ramips-mt7621
      id: asset-0b05a0b616dfed8d98b0cd8436bb9db9
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ramips-mt7621.zip
        asset_name: x-wrt-9.0_b202105042338-ramips-mt7621.zip
        asset_content_type: application/zip
  build-ramips-mt76x8_ramips-mt76x8-nosymbol_ramips-rt305x:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt76x8 ramips-mt76x8-nosymbol ramips-rt305x" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ramips-mt76x8_ramips-mt76x8-nosymbol_ramips-rt305x
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ramips-mt76x8
      id: asset-0997d9c2c3d0ad3693c11a6acf8658cf
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ramips-mt76x8.zip
        asset_name: x-wrt-9.0_b202105042338-ramips-mt76x8.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ramips-mt76x8-nosymbol
      id: asset-9947b4ad82f401b5027633da6af3357c
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ramips-mt76x8-nosymbol.zip
        asset_name: x-wrt-9.0_b202105042338-ramips-mt76x8-nosymbol.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ramips-rt305x
      id: asset-f319dfa4f153b619cb50a72df8a660b3
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ramips-rt305x.zip
        asset_name: x-wrt-9.0_b202105042338-ramips-rt305x.zip
        asset_content_type: application/zip
  build-ramips-rt3883-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-rt3883-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-ramips-rt3883-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-ramips-rt3883-nosymbol
      id: asset-f276cf04fd3d77818234056a49e66f93
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-ramips-rt3883-nosymbol.zip
        asset_name: x-wrt-9.0_b202105042338-ramips-rt3883-nosymbol.zip
        asset_content_type: application/zip
  build-rockchip-armv8:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="rockchip-armv8" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-rockchip-armv8
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-rockchip-armv8
      id: asset-7ffc79fb63754b874be5d28b817889c9
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-rockchip-armv8.zip
        asset_name: x-wrt-9.0_b202105042338-rockchip-armv8.zip
        asset_content_type: application/zip
  build-x86_64_x86_64-docker:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64 x86_64-docker" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-x86_64_x86_64-docker
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-x86_64
      id: asset-b66d99bf124e431ca6bacd520c11dc2c
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-x86_64.zip
        asset_name: x-wrt-9.0_b202105042338-x86_64.zip
        asset_content_type: application/zip
    - name: Upload Release Asset x-wrt-9.0_b202105042338-x86_64-docker
      id: asset-6b4ccd2e22264b2e89375fdae7cbce99
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-x86_64-docker.zip
        asset_name: x-wrt-9.0_b202105042338-x86_64-docker.zip
        asset_content_type: application/zip
  build-x86_generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-failure-log-x86_generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-9.0_b202105042338-x86_generic
      id: asset-88a358ba839cc33997174b476a3ae9cb
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-9.0_b202105042338-x86_generic.zip
        asset_name: x-wrt-9.0_b202105042338-x86_generic.zip
        asset_content_type: application/zip
